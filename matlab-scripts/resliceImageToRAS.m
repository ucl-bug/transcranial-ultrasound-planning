function resliceImageToRAS(inputFile, outputFile, padding, useFSLPadding)
%RESLICEIMAGETORAS Reslice and pad nifti image.
%
% DESCRIPTION:
%     resliceImageToRAS performs the following tasks:
%         1. Calls reslice_nii to reslice the input image to have isotropic
%            resolution and LPI orientation.
%         2. Calls pad_nii or padImageFSL to pad the images.
%         3. Strips the qform from the file, and sets the sform translation
%            to [0, 0, 0] to set origin to LPI corner.
%
%     If the input file is not specified, a file browser is launched to
%     select one. If the output file is not specified, the filename is
%     autogenerated.
%
%     Uses the nifti tools from: 
%     https://uk.mathworks.com/matlabcentral/fileexchange/8797-tools-for-nifti-and-analyze-image
%
% USAGE:
%     extractTransducerPosition(inputFile)
%
% OPTIONAL INPUTS:
%     inputFile      - Filename for input image.
%     outputFile     - Filename for output image.
%     padding        - Padding for pad_nii, given as [L, R, P, A, I, S].
%     useFSLPadding  - Boolean controlling whether fslroi should be used
%                      for the padding. Default = false.
%
% ABOUT:
%     author         - Bradley E. Treeby
%     date           - 21st May 2023
%     last update    - 2nd July 2024

% Get input file if not provided.
if (nargin == 0) || isempty(inputFile)
    [file,path] = uigetfile('*.nii; *.nii.gz', 'Select NIFTI image');
    if file == 0
        return
    else
        inputFile = fullfile(path, file);
    end
else
    validateattributes(inputFile, {'char'}, {'mustBeFile'});
end

% Output filename.
if (nargin < 2) || isempty(outputFile)
    [pathname, filename, ~] = fileparts(inputFile);
    [~, filename, ~] = fileparts(filename);
    outputFile = fullfile(pathname, [filename '_resliced.nii.gz']);
else
    validateattributes(outputFile, {'char'}, {'mustBeFile'});
end

% Use fsl to pad
if (nargin < 4) || isempty(useFSLPadding)
    useFSLPadding = false;
end

% Reslice to isotropic resolution with LPI/RAS transform.
reslice_nii(inputFile, outputFile);

% Pad the image if required.
if (nargin >= 3) && ~isempty(padding)
    if useFSLPadding
        padImageFSL(outputFile, outputFile, padding);
    else
        nii = load_nii(outputFile);
        validateattributes(padding, {'numeric'}, {'numel', 6, 'integer', 'nonnegative', 'finite'});
 	    option.pad_from_L = padding(1);
 	    option.pad_from_R = padding(2);
 	    option.pad_from_P = padding(3);
 	    option.pad_from_A = padding(4);
 	    option.pad_from_I = padding(5);
 	    option.pad_from_S = padding(6);
 	    option.bg = min(nii.img(:));
        nii = pad_nii(nii, option);
        save_nii(nii, outputFile);
    end
end

% Reset qform and set origin to LPI corner.
nii = load_untouch_nii(outputFile);
nii.hdr.dime.pixdim(1) = 1;
nii.hdr.hist.qform_code = 0;
nii.hdr.hist.quatern_b = 0;
nii.hdr.hist.quatern_c = 0;
nii.hdr.hist.quatern_d = 0;
nii.hdr.hist.qoffset_x = 0;
nii.hdr.hist.qoffset_y = 0;
nii.hdr.hist.qoffset_z = 0;
nii.hdr.hist.srow_x(4) = 0;
nii.hdr.hist.srow_y(4) = 0;
nii.hdr.hist.srow_z(4) = 0;

% Check for 0 slope, and reset to 1 if so.
if nii.hdr.dime.scl_slope == 0
    nii.hdr.dime.scl_slope = 1;
    nii.hdr.dime.scl_inter = 0;
end

% Save changes.
save_untouch_nii(nii, outputFile);
